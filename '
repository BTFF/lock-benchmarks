#include <limits.h>
#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <sys/mman.h>
#include <signal.h>
#include <string.h>
#include "test.h"
#include "spin_lock.h"

static void* shared = NULL;

static int* value = NULL;

static volatile struct
{
	int lock;
	struct test* head;
	struct test* tail;
}* list;

static pid_t* process = NULL;
static int process_size = 0;

static struct test* test = NULL;

static sigset_t mask;
static sigset_t oldmask;

static volatile int sig = 0;

static void sigusr1(int s)
{
	printf("%s %d %s %d\n", __FILE__, __LINE__, __FUNCTION__, getpid()); fflush(stdout);
	if(SIGUSR1 == s)
		sig = s;
}

struct test* prepare(int n)
{
	int i;

	if(!(shared = mmap(NULL, sizeof(*value) + sizeof(*list) + sizeof(*process) * (process_size = n) + sizeof(*test) * n, PROT_READ|PROT_WRITE, MAP_ANON|MAP_SHARED, -1, 0)))
		return NULL;
	else
	{
		void* p = shared;
		value = p; p += sizeof(*value);
		list = p; p += sizeof(*list);
		process = p; p += sizeof(*process) * process_size;
		test = p;
	}

	*value = 0;
	list->lock = 0;
	list->head = NULL;
	list->tail = NULL;

	//sigfillset(&mask);
	//sigdelset(&mask, SIGUSR1);
	//printf("mask: %X\n", mask);
	sigprocmask(0, NULL, &mask);
	signal(SIGUSR1, sigusr1);
	sigaddset(&mask, SIGUSR1);
	sigprocmask(SIG_SETMASK, &mask, &oldmask);

	for(i = 0; i < n; i++)
	{
		process[i] = -1;
		test[i].id = i;
		test[i].value = value;
	}
	i--;
	process[i] = getpid();
	return test;
}

void startroutine(int id, void* (*routine)(void*), void* arg)
{
	pid_t pid;
	pid = fork();
	if(0 == pid) /* child */
	{
		routine(arg);
		exit(0);
	}
	else
	if(0 > pid)
		printf("startroutine failed\n");
	else
		process[id] =pid;
}

void waitroutine(int id)
{
	waitpid(process[id], NULL, 0);
}

void lock(int i)
{
	struct test* self = test + i;
	pid_t wait = -1;

	self->next = NULL;
	spin_lock(&list->lock);
	if(list->head)
	{
		list->tail->next = self;
		list->tail = self;
		while(-1 == (wait = process[i]));
	}
	else
	{
		list->head = self;
		list->tail = self;
	}
	spin_unlock(&list->lock);

	if(-1 != wait)
	{
		printf("%d %d\n", SIGUSR1, sig);
		sigprocmask(SIG_SETMASK, &oldmask, NULL);
		while(SIGUSR1 != sig)
		{
			printf("%d %d\n", SIGUSR1, sig);
			printf("%s %d %s %d\n", __FILE__, __LINE__, __FUNCTION__, getpid()); fflush(stdout);
			pause();
			printf("%d %d\n", SIGUSR1, sig);
			printf("%s %d %s %d\n", __FILE__, __LINE__, __FUNCTION__, getpid()); fflush(stdout);
		}
		sigprocmask(SIG_SETMASK, &mask, NULL);
		sig = 0;
	}
}

void unlock(int i)
{
	struct test* head;
	pid_t wait = -1;

	spin_lock(&list->lock);
	if((head = list->head->next))
	{
		list->head = head;
		while(-1 == (wait = process[head->id]));
	}
	else
	{
		list->head = NULL;
		list->tail = NULL;
	}
	spin_unlock(&list->lock);

	if(-1 != wait)
		kill(wait, SIGUSR1);
}

